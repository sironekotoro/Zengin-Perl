#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Lingua::JA::Regular::Unicode 0.13 qw/alnum_h2z/;
use Encode;

use Zengin::Perl;

my $character_code = character_code();

# 引数に何もない場合、引数が2つ以上のとき
if ( $#ARGV == -1 || $#ARGV > 1 ) {
    print encode( $character_code, help_message() );
    exit;
}

my $first_argv  = decode( $character_code, $ARGV[0] );
my $second_argv = decode( $character_code, $ARGV[1] );

zengin( $first_argv, $second_argv );

sub zengin {
    my ( $arg_first, $arg_second ) = @_;

    my $zp = Zengin::Perl->new();

    my $result;

    my $banks = do {
        my $banks = [];
        if ( $arg_first =~ /\d+/ ) {

            # 銀行コードは数字4桁左ゼロ埋め
            my $bank_code = sprintf( "%04d", $arg_first );
            my $bank      = $zp->bank_code_search( bank_code => $bank_code );
            push @{$banks}, $bank;
            $banks;
        }
        elsif ( $arg_first =~ /\w+/ ) {

            # 銀行名に含まれる英字を大文字にする
            $arg_first = uc($arg_first);

            # 半角英字を全角英字に
            my $bank_name = alnum_h2z($arg_first);

            # PayPayのみ大文字小文字が混じるので再変換
            $bank_name = 'ＰａｙＰａｙ' if $bank_name eq 'ＰＡＹＰＡＹ';

            $banks = $zp->bank_name_search( bank_name => $bank_name );
            $banks;
        }
    };

    if ($arg_second) {

        for my $bank ( @{$banks} ) {

            if ( $arg_second =~ /\d+/ ) {
                my $branch_code = sprintf( "%03d", $arg_second );
                my $branch = $bank->branch( branch_code => $branch_code );
                $result = bank_vervose($bank) . branch_vervose($branch);
                print encode( $character_code, $result );
            }

            my $branches = $bank->branches();

            for my $branch ( values %{$branches} ) {

                if ( $branch->name =~ /$arg_second/ ) {
                    my $bank_name = $bank->name;
                    my $bank_code = $bank->code;

                    my $branch_name = $branch->name;
                    my $branch_code = $branch->code;

                    $result
                        .= "$bank_code\t$bank_name\t$branch_code\t$branch_name\n";

                }

            }

        }

    }
    else {

        for my $bank ( @{$banks} ) {

            $result .= bank_vervose($bank);
        }

    }

    print encode( $character_code, $result );

}

sub bank_vervose {
    my $bank = shift;

    my %hash = ();
    map { $hash{$_} = $bank->$_ } qw(code name hira kana roma);

    return << "EOS";
============================
銀行コード　　　　: $hash{code}
銀行名　　　　　　: $hash{name}
銀行名（ひらがな）: $hash{hira}
銀行名（カタカナ）: $hash{kana}
銀行名（ローマ字）: $hash{roma}
EOS

}

sub branch_vervose {
    my $branch      = shift;
    my %branch_hash = ();
    map { $branch_hash{$_} = $branch->$_ } qw(code name hira kana roma);

    return << "EOS";
============================
支店コード　　　　: $branch_hash{code}
支店名　　　　　　: $branch_hash{name}
支店名（ひらがな）: $branch_hash{hira}
支店名（カタカナ）: $branch_hash{kana}
支店名（ローマ字）: $branch_hash{roma}
EOS

}

sub help_message {
    my $help = << "EOS";
GETTING STARTED
  # 引数が1つ：銀行検索
    zengin みずほ
    zengin 0001

  # 引数が2つ：銀行ごとの支店検索
    zengin みずほ 東京
EOS

    return $help;
}

sub character_code {
    if ( $^O eq 'MSWin32' ) {
        return 'cp932';
    }
    else {
        return 'utf8';
    }
}

1;

